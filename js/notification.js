import { search_accountByid} from "./db.js";

// Firebase Configuration
const firebaseConfig = {
    apiKey: "AIzaSyB3D8w5hAidJnwAybd_AEZoBFKDtjSl0UU",
    authDomain: "catprojectce.firebaseapp.com",
    databaseURL: "https://catprojectce-default-rtdb.asia-southeast1.firebasedatabase.app/",
    projectId: "catprojectce",
    storageBucket: "catprojectce.firebasestorage.app",
    messagingSenderId: "128805338272",
    appId: "1:128805338272:web:fd50c8bc8f73bef823ddc5"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

export async function sendNotification(postId, toUser, type, fromUser) {
    const fUser = await search_accountByid(fromUser);
    const notificationRef = firebase.database().ref(`notifications/${toUser}`);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Notification ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    const query = notificationRef.orderByChild('postId').equalTo(postId);
    query.once('value', async (snapshot) => {
        let notificationExists = false;
        snapshot.forEach((childSnapshot) => {
            const data = childSnapshot.val();
            if (data.type === type && data.from == fromUser) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ Notification ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                childSnapshot.ref.remove();
                console.log('üóëÔ∏è Notification removed!');
                notificationExists = true;
            }
        });

        if (!notificationExists) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Notification ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡πÉ‡∏´‡∏°‡πà
            notificationRef.push({
                postId: postId,
                userImage: fUser.img,
                type: type,
                from: fromUser,
                isRead: false,
                timestamp: Date.now(),
            }).then(() => {
                console.log('‚úÖ Notification sent!');
            }).catch((error) => {
                console.error('‚ùå Error sending notification:', error);
            });
        }
    });
}


export async function displayNotification(userId) {
    const notificationRef = firebase.database().ref(`notifications/${userId}`)
        .orderByChild('timestamp')
        .limitToLast(10); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const notiContainer = document.getElementById("notiContainer");
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö)
    notificationRef.on('value', async (snapshot) => {
        const notifications = [];

        snapshot.forEach((childSnapshot) => {
            const data = childSnapshot.val();
            notifications.push({ key: childSnapshot.key, ...data });
        });

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î" ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
        notifications.sort((a, b) => b.timestamp - a.timestamp);

        notiContainer.innerHTML = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå UI
        for (const data of notifications) {
            const notiDot = document.getElementById("notification-dot");
            if(data.isRead == false){
                notiDot.style.opacity = 1;
            }
           


        for (const data of notifications) {
            const notification = document.createElement("div");
            notification.classList.add("noticontainer");
            notification.setAttribute("data-id", data.key); // ‡πÄ‡∏Å‡πá‡∏ö Key ‡∏Ç‡∏≠‡∏á Firebase ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô DOM

            const iconNoti = document.createElement("i");
            const image = document.createElement("img");
            image.classList.add("notiImg");
            image.src = data.userImage;

            const imgSection = document.createElement('div');
            imgSection.classList.add('imgSection');
            imgSection.appendChild(image);

            let valueType = "";
            let endtext = "";

            if (data.type === "like") {
                iconNoti.classList.add("fa-solid", "fa-heart");
                iconNoti.style.color = "#FA3B3B";
                notification.style.backgroundColor = "#FA3B3B";
                valueType = "like";
                endtext = "your post.";
            }
            else if (data.type === "comment") {
                iconNoti.classList.add("fa-solid", "fa-comment-dots");
                iconNoti.style.color = "#E09030";
                notification.style.backgroundColor = "#E09030";
                valueType = "comment";
                endtext = "your post.";
            }
            else if (data.type === "bookmark") {
                iconNoti.classList.add("fa-solid", "fa-bookmark");
                iconNoti.style.color = "#2e7eff";
                notification.style.backgroundColor = "#2e7eff";
                valueType = "bookmark";
                endtext = "your post.";
            } else {
                iconNoti.classList.add("fa-solid", "fa-paw");
                iconNoti.style.color = "#27b05b";
                notification.style.backgroundColor = "#27b05b";
                valueType = "send adopt request";
                endtext = "to you.";
            }

            imgSection.appendChild(iconNoti);
            notification.appendChild(imgSection);

            const account = await search_accountByid(data.from);
            const textNode = document.createTextNode(` ${account.username} ${valueType} ${endtext}`);
            notification.appendChild(textNode);

            notiContainer.appendChild(notification);
        }
    }
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö Notification ‡∏≠‡∏≠‡∏Å
    notificationRef.on('child_removed', (snapshot) => {
        const notification = notiContainer.querySelector(`[data-id="${snapshot.key}"]`);
        if (notification) {
            notification.remove(); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DOM
            console.log(`üóëÔ∏è Notification ${snapshot.key} removed from UI!`);
        }
    });

}


export async function check_stateNoti(userId) {
    const notificationRef = firebase.database().ref(`notifications/${userId}`)

     notificationRef.once('value', async (snapshot) => {
        const updates = {};

        snapshot.forEach((childSnapshot) => {
            const key = childSnapshot.key;
            updates[`${key}/isRead`] = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isRead ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Notification ‡πÄ‡∏õ‡πá‡∏ô true
        });
        const notiDot = document.getElementById("notification-dot");
        notiDot.style.opacity = 0;
        if (Object.keys(updates).length > 0) {

            await firebase.database().ref(`notifications/${userId}`).update(updates);
            console.log("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        } else {
            console.log("‡πÑ‡∏°‡πà‡∏°‡∏µ Notification ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
        }
    });
}
